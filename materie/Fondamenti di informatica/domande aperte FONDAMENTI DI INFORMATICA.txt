FONDAMENTI DI INFORMATICA INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) Generato il 17/06/2022 14:13:25 INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 2/159 INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 3/159 INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 4/159 INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 5/159
09. Scrivere la definizione di Algoritmo.
10. Descrivere le proprietà che devono essere verificate per un Algoritmo. Un algoritmo è una sequenza finita, ordinata e non ambigua di istruzioni progettata per risolvere un problema specifico o eseguire un compito Deve soddisfare le seguenti proprietà fondamentali: Finitezza: L’algoritmo termina dopo un numero definito di passi. Non ambiguità: Ogni passo è preciso e interpretabile in un solo modo. Eseguibilità: Le istruzioni possono essere eseguite con gli strumenti disponibili (es. un computer). Determinismo: A parità di input, produce sempre lo stesso risultato. Obiettivo: È finalizzato a risolvere un problema o raggiungere un risultato chiaro. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 7/159
01. Descrivere cosa contiene il grafico tipico della Legge di Moore.
02. Si descriva la Legge di Moore e le sue implicazioni. 1. Il grafico rappresenta l’andamento storico e previsto del numero di transistor per circuito integrato (chip) in funzione del tempo. Elementi chiave: Asse X (Temporale): Anni (es. dal 1970 a oggi). Spesso include previsioni future. Asse Y (Scala Logaritmica): Numero di transistor per chip (es. da migliaia a centinaia di miliardi). La scala logaritmica rende visibile la crescita esponenziale come una linea retta. Andamento della Curva: Linea che mostra un raddoppio approssimativo ogni 18-24 mesi, seguendo la previsione originale di Gordon Moore (1965). Punti marcati corrispondenti a chip iconici (es. Intel 4004, Pentium, processori moderni). Annotazioni Significative: Eventi tecnologici (es. introduzione della litografia EUV, transizione a nanometri inferiori come 7nm, 5nm). Limiti fisici o economici (es. difficoltà nel mantenere il ritmo dopo il 2020). Confronti o Estensioni: A volte include altre metriche correlate (es. potenza di calcolo, efficienza energetica). Linee tratteggiate per indicare previsioni o scenari alternativi (es. fine della Legge di Moore). 2. La Legge di Moore è un’osservazione empirica formulata da Gordon Moore (co-fondatore di Intel) nel 1965, che afferma: "Il numero di transistor in un circuito integrato (chip) raddoppia approssimativamente ogni 18-24 mesi, a parità di costo." Crescita esponenziale: La densità dei transistor su un chip aumenta in modo esponenziale nel tempo, portando a: Maggiore potenza di calcolo. Riduzione delle dimensioni e dei costi per singolo transistor. Origine e contesto: Moore fece questa previsione basandosi sui trend tecnologici degli anni ’60 e ’70. Inizialmente previde un raddoppio annuale, ma nel 1975 corresse la stima a ogni 2 anni. Impatto tecnologico: Ha guidato l’innovazione nell’industria dei semiconduttori per oltre 50 anni. Ha reso possibili dispositivi più potenti, compatti ed economici (es. smartphone, computer, IoT). Limiti attuali: Oggi si ritiene che la Legge di Moore stia rallentando a causa di: Vicinanze ai limiti fisici (transistor di pochi nanometri, vicini alle dimensioni atomiche). Aumento dei costi di produzione e ricerca. Sfide termiche e di efficienza energetica. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 8/159
12. Scrivere la definizione dell'Architettura di Von Neumann.
13. Descrivere il funzionamento della ALU.
14. Descrivere le fasi del ciclo fetch-decode-execute. Il Program Counter (PC) contiene l’indirizzo della prossima istruzione, non l’istruzione stessa. L’Instruction Register (IR) memorizza l’istruzione corrente, non viene incrementato. Errore: Le istruzioni non vengono copiate nel PC (che gestisce indirizzi), ma nell’IR. Un valore (es. un intero a 32 bit o una stringa) può occupare più celle di memoria (es. 4 celle per un intero a 32 bit).
13. La ALU (Arithmetic Logic Unit) è il componente della CPU dedicato all’esecuzione di operazioni aritmetiche (addizioni, sottrazioni, moltiplicazioni) e logiche (AND, OR, NOT, confronti). Riceve dati dai registri della CPU, li elabora in base all’istruzione decodificata dall’Unità di Controllo, e restituisce il risultato, che può essere memorizzato in un registro o inviato in memoria. Opera su dati binari (bit) e utilizza flag (es. zero, overflow) per segnalare condizioni specifiche, utili per controllare il flusso del programma (es. salti condizionati). La sua efficienza è cruciale per le prestazioni complessive del computer.
12. L’Architettura di Von Neumann, proposta da John von Neumann e altri nel 1945, rappresenta il modello teorico alla base dei computer moderni. Questo design unificato rivoluzionò l’informatica introducendo il concetto di "programma memorizzato" (stored-program concept), in cui dati e istruzioni condividono la stessa memoria, permettendo una flessibilità senza precedenti nella programmazione. Al cuore di questa architettura si trova la CPU (Central Processing Unit), composta da tre elementi fondamentali. L’Unità di Controllo (CU) coordina il flusso di dati e istruzioni, garantendo che ogni operazione avvenga nel giusto ordine. L’ALU (Arithmetic Logic Unit), invece, si occupa di eseguire calcoli aritmetici e operazioni logiche, come confronti o operazioni booleane. Completa la CPU una serie di registri, memorie ad altissima velocità utilizzate per conservare dati temporanei, come il Program Counter (che tiene traccia della prossima istruzione da eseguire) e l’Instruction Register (dove viene memorizzata l’istruzione corrente). La Memoria Centrale svolge un ruolo cruciale, poiché archivia sia i dati che le istruzioni in celle indirizzabili, organizzate in unità di dimensione fissa, come i byte. Questa memoria unificata permette al computer di modificare dinamicamente i programmi in esecuzione, semplicemente riscrivendo parti della memoria stessa. Il trasferimento delle informazioni tra CPU, memoria e periferiche è gestito dal Bus di Sistema, suddiviso in tre categorie. Il bus dati si occupa di trasportare le informazioni, il bus indirizzi specifica la locazione di memoria da cui leggere o scrivere, mentre il bus controllo invia segnali per sincronizzare le operazioni. Le periferiche di Input/Output (I/O), come tastiere, monitor o stampanti, permettono l’interazione tra l’utente e il sistema, trasformando input esterni in dati elaborabili e restituendo risultati in forma comprensibile. Il funzionamento dell’architettura segue il ciclo fetch-decode-execute.
14. Durante la fase di fetch, la CPU recupera un’istruzione dalla memoria utilizzando il Program Counter per individuare l’indirizzo corretto. Successivamente, l’istruzione viene decodificata dall’Unità di Controllo (decode), che ne interpreta il significato. Nella fase di execute, l’ALU esegue l’operazione richiesta, che può essere un calcolo, un accesso alla memoria o una modifica dei registri. Infine, i risultati vengono memorizzati in memoria o inviati a una periferica di output (write-back), completando il ciclo. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 10/159
11. Descrivere il funzionamento di una Pila, le sue funzioni e un esempio.
12. Descrivere a cosa servono e come si utilizzano le memorie gerarchiche.
13. Descrivere le differenze fra una Pila e una Coda. Una pila (stack) segue la politica LIFO (Last In, First Out): l’ultimo elemento inserito è il primo a essere rimosso. Nelle unità a disco tradizionali (HDD), la velocità di accesso ai dati dipende dalla posizione fisica del dato sul disco. La testina deve spostarsi sulla traccia corretta (seek time) e attendere che il settore ruoti sotto di essa (rotational latency), rendendo i tempi di accesso variabili. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 12/159
09. Descrivere in quali casi non è possibile eseguire due istruzioni in parallelo in presenza di Architetture Superscalari.
10. Considerando un sistema Superscalare a due core, a cui arrivano da eseguire le due istruzioni seguenti: mov ax, 0 (salva il valore zero nel registro ax) sub ax, 1 (sottrai 1 dal valore registro ax e salvalo in ax) descrivere tutti gli scenari che si possono verificare nel caso di esecuzione parallela e, per ognuno, il valore finale del registro ax. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 18/159
09. Descrivere le principali differenze fra un computer classico e un computer quantistico.
10. Dopo aver descritto brevemente la Legge di Moore, illustrare quali sono le sue limitazioni principali e come si possono superare. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 20/159
09. Illustrare brevemente i motivi per i quali è stato creato lo standard Posix e le sue caratteristiche principali.
10. Descrivere i gruppi di permessi di un sistema Unix/Posix. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 22/159
09. Descrivere che cos'è e a cosa serve la shell di Unix.
10. Dare una descrizione e qualche esempio del comando man di Unix.
11. Descrivere che cos'è e a cosa serve la pipe di Unix. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 24/159
12. Descrivere la procedura per trasformare un numero positivo nel suo corrispondente numero negativo quando esso è rappresentato in formato binario in complemento a due. Proporre un esempio di tale trasformazione.
13. Si calcoli la somma fra numeri binari 1001+0011 discutendo i passaggi. Si converta poi il risultato in base 10.
14. Dato il numero 35, rappresentato in base 10, illustrare i passaggi per la conversione in base 2. Una volta convertito nella sua rappresentazione binaria, trasformarlo nella sua controparte negativa (ovvero -35) usando la rappresentazione in complemento a due.
15. Calcolare, illustrando tutti i passaggi, quanto vale in base 10 il numero binario 10110011. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 26/159
11. Descrivere il processo di compilazione di un programma Java.
12. Date le regole di produzione: A->B|topolino B->CB|pippo C->pluto Mostrare almeno tre esempi di frasi ben formate. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 28/159
09. Descrivere i motivi per i quali è necessario dichiarare le variabili.
10. Elencare i tipi primitivi di Java e il loro dominio.
11. Mettere in relazione fra di loro i domini dei tipi base interi di Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 30/159
09. Descrivere le principali differenze tra le istruzioni if-else e switch-case ed illustrarle con degli esempi.
09. Descrivere gli operatori relazionali.
10. Descrivere gli operatori booleani e le loro precedenze. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 38/159
09. Descrivere l'operazione di assegnamento di una variabile.
10. Descrivere l'operazione di inizializzazione di una variabile. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 40/159
09. Descrivere che cosa sono e come funzionano gli operatori con associatività a sinistra e fare almeno 3 esempi di espressoni che li utilizzano.
10. Scrivere almeno 3 esempi di espressioni logiche e descrivere come possono essere utilizzate nei programmi Java.
11. Utilizzando il codice Java scrivere un esempio di uso dell'operatore modulo per testare se una variabile intera è pari o dispari. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 42/159
09. Scrivere un programma Java che inverta con un ciclo for l'array di caratteri "char[] a = {'p', 'i', 'p', 'p', 'o', '.'}" e che lo stampi a video.
10. Utilizzando il ciclo for scrivere un programma Java che stampi il doppio di ogni numero naturale compreso fra 1 e 100. Ad esempio "2 4 6 8 10 12 ... ecc". INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 46/159
09. Scrivere il codice Java del prodotto di una matrice per uno scalare. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 56/159
01. Descrivere i tipi di passaggio di parametri nelle funzioni del linguaggio Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 57/159
09. Descrivere la differenza tra la classe String e un array di char.
10. Descrivere la differenza tra la classe String e la classe StringBuffer. Un'istanza della classe String e un array di char non sono esattamente uguali in Java. Le principali differenze sono: 1. Immutabilità: String: Le stringhe in Java sono immutabili. Una volta create, non possono essere modificate. Ogni operazione che sembra alterare una stringa (es. replace(), toUpperCase()) crea una nuova stringa. Array di char: Gli array di caratteri sono mutabili. Puoi modificare direttamente gli elementi al suo interno. 2. Metodi e funzionalità: String: Offre metodi integrati per manipolare testo (es. substring(), split(), indexOf()). Array di char: Ha solo operazioni base degli array (es. accesso tramite indice, iterazione). 3. Conversione: Puoi convertire una String in un array di char (e viceversa), ma non sono la stessa struttura. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 61/159
09. Descrivere il funzionamento dei metodi toUpperCase() e toLowerCase() della classe String e fare degli esempi. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 63/159
09. Descrivere che cos'è una keyword di Java e fare degli esempi di keyword. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 65/159
09. Descrivere che cos'è un Abstract Data Type e quale relazione ha con il concetto di classe Java.
10. Descrivere la relazione tra classe ed oggetto Java e fare degli esempi. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 67/159
09. Scrivere la definizione di metodo statico e le implicazioni di avere dei metodi statici per una classe.
10. Descrivere che cos'è l'istanza di una classe e come si crea una nuova istanza, riportando degli esempi di codice. Il metodo stampa() è un metodo non statico (istanza). Il metodo main è invece static e in Java un metodo statico non può accedere direttamente a metodi non statici senza un'istanza della classe. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 69/159
09. Descrivere che cos'è l'incapsulamento e come si può implementare nel linguaggio Java.
10. Descrivere cosa si intende per scopo di una variabile. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 75/159
01. Descrivere cosa si intende per ereditarietà ed illustrarlo con un esempio in codice Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 78/159
01. Descrivere cosa si intende per polimorfismo ed illustrarlo con un esempio in codice Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 79/159
01. Descrivere che cos'è l'overloading degli operatori e fare un esempio in codice Java.
02. Scrivere una classe Somma che dimostri l’overloading degli operatori in Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 80/159
09. Descrivere il problema del diamante nell'ereditarietà multipla e mostrare un esempio.
10. Si descriva come il problema dell'ereditarietà multipla viene risolto nel linguaggio Java.
11. Descrivere la differenza tra ereditarietà normale ed ereditarietà multipla e mostrare degli esempi. In Java, tutti i metodi dichiarati in un'interfaccia sono implicitamente public e abstract (astratti). INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 82/159
01. Descrivere che cos'è e a che cosa serve un metodo astratto in Java e fornire un esempio di codice.
02. Descrivere che cos'è e a che cosa serve una classe astratta in Java e fornire un esempio di codice. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 85/159
09. Che cos'è e a che cosa serve un package nel linguaggio Java? Fornire un esempio di codice Java che dichiari una classe "Analisi" appartenente al package "it.ecampus.corsi" e spiegare in quale directory dovrà essere salvato il file sorgente della classe. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 87/159
09. Spiegare quali sono i modificatori di accesso, a cosa servono e come si indicano nel codice con degli esempi. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 89/159
09. Descrivere quali sono i metodi più importanti ereditati dalla classe Object.
01. Usando i metodi della classe Math di Java per la conversione degli angoli espressi in gradi o in radianti, scrivere un esempio di codice che converta l'angolo pi greco mezzi in gradi e l'angolo 15 gradi in radianti.
02. Elencare e descrivere le funzioni per il calcolo dei logaritmi presenti nella classe Math di Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 92/159
09. Scrivere in codice Java e commentare il metodo toString() della classe Lista semplicemente linkata.
10. Descrivere il contenuto della classe Nodo e fare un esempio di implementazione della classe in codice Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 98/159
01. Scrivere in codice Java e commentare un metodo che verifichi se una Lista semplicemente linkata è vuota oppure no (restituisce treu se vuota, false altrimenti).
02. Scrivere in codice Java e commentare il metodo di inserimento in testa della classe Lista semplicemente Linkata. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 99/159
09. Scrivere in codice java e commentare un metodo di ricerca di un nodo in una Lista semplicemente linkata non ordinata. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 101/159
09. Scrivere in codice Java e commentare un metodo che effettui l'eliminazione del nodo di testa di una Lista semplicemente linkata. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 103/159
09. Descrivere la struttura di una Lista doppiamente linkata e scrivere il codice della classe in linguaggio Java.
10. Descrivere la struttura di un Nodo per una Lista doppiamente linkata e scrivere il codice della classe in linguaggio Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 105/159
09. Descrivere la struttura del Nodo di un Albero Binario e scrivere il codice della lcasse in linguaggio Java.
10. Descrivere la struttura di un Albero Binario e scrivere il codice della lcasse in linguaggio Java. Le visite Preorder, Inorder e Postorder di un albero binario sono tradizionalmente implementate utilizzando la ricorsione. Questo perché la struttura gerarchica degli alberi si presta naturalmente a un approccio ricorsivo: Preorder: Visita la radice, poi il sotto-albero sinistro, poi il sotto-albero destro. Inorder: Visita il sotto-albero sinistro, poi la radice, poi il sotto-albero destro. Postorder: Visita il sotto-albero sinistro, poi il sotto-albero destro, poi la radice. La ricorsione permette di gestire in modo elegante la navigazione attraverso i nodi, sfruttando la definizione stessa degli alberi come strutture ricorsive. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 109/159
09. Descrivere il ruolo di ciascuna delle interfacce Collection, List, Set e Queue e il rapporto che esiste fra di loro in termini di gerarchia.
10. Descrivere che cos'è il Collections Framework di Java ed elencare le interfacce principali. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 111/159
09. Descrivere le principali differenze tra ArrayList e LinkedList, fornendo degli esempi di codice.
10. Descrivere le principali classi wrapper Java dei tipi numerici. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 113/159
09. Descrivere che cos'è e a che cosa serve l'operatore diamond in Java e fornire degli esempi di codice.
09. Dato un certo problema P e due algoritmi A e B che lo risolvono esntrambi ma in modo diverso, come faccio a scegliere il migliore fra i due? Discutere la problematica in termini di complessità degli algoritmi e fornire un esempio usando la notazione O-grande.
10. Dato l'array "int[][] a = new int[n][n];" scrivere il codice per inizializzare i suoi elementi tutti al valore 5 e poi calcolarne la funzione di complessità asintotica. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 122/159
09. Descrivere cosa sono e a che servono i Thread in Java e illustrare le modalità per crearli in termini di codice Java.
10. Usando il codice Java scrivere una semplice classe Thread che stampi 1000 volte il nome del proprio genere musicale preferito a video. Un Thread in Java rappresenta un flusso di esecuzione indipendente all'interno di un programma. Un'applicazione Java può avere: un solo thread (monothread) oppure più thread che lavorano contemporaneamente (multithreading) In parole semplici: un thread è come un “compito” che il tuo programma esegue in parallelo ad altri. I Thread sono utili per eseguire più operazioni contemporaneamente, migliorare le prestazioni sfruttando più core del processore, eseguire compiti in background oppure suddividere un problema complesso in attività indipendenti. Quando si fa uso dei Thread in Java bisogna prestare attenzione a : Sincronizzazione: Se più thread accedono a risorse condivise (es. variabili), servono meccanismi di controllo (come synchronized). Concorrenza: Il risultato può variare a seconda del momento in cui i thread vengono eseguiti. Performance: Troppi thread possono peggiorare le prestazioni. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 124/159
09. Descrivere che cos'è e come si usa il metodo System.currentTimeMillis() e fornire un esempio in codice Java.
10. Descrivere le differenze principali tra le classi Date, Calendar e SimpleDateFormat. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 126/159
09. Descrivere che cos'è il Security Manager in Java e a che cosa serve. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 128/159
09. Descrivere che cos'è e come si usa la classe Runtime di Java.
10. Descivere a cosa serve la Java Native Interface. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 130/159
09. Descrivere a che serve e come funziona il Garbage Collector di Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 132/159
09. Descrivere il tool Javadoc di Java, spiegare a cosa serve e fornire un esempio in codice Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 134/159
01. Descrivere le principali fasi di Unified Process.
02. Descrivere le differenze tra il modello di Progettazione a Cascata e il Modello Incrementale. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 135/159
09. Descrivere che cos'è UML e quali sono i principali tipi di diagrammi. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 137/159
09. Descrivere a cosa serve il Diagramma dei Casi d'Uso UML e da quali elementi è costituito.
10. Descrivere le principali differenze tra il Diagramma delle Classi e il Diagramma degli Oggetti di UML. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 139/159
09. Descrivere a cosa serve un Diagramma delle Attività (o Activity Diagram) UML e fornire un esempio.
10. Descrivere a cosa serve un Diagramma degli Stati UML e fornire un esempio. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 141/159
09. Illustrare in che forma può essere descritta una classe in un Diagramma delle Classi UML. In particolare descrivere dove vengono rappresentati il nome della classe, i suoi attributi e i suoi metodi.
10. Illustrare come possono essere descritti i livelli di visibilità degli attributi di una classe in un Diagramma delle Classi UML. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 143/159
09. Descrivere quali tipi di associazioni possiamo definire fra classi in un Diagramma delle Classi UML e che forma hanno.
10. In un Diagramma delle Classi UML siano date due classi, Persona ed Automobile, fra cui sia indicata una normale associazione (senza nessuna freccia, cardinalità, ecc). Mostrare una possibile implementazione in codice Java delle due classi. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 145/159
09. Descrivere le differenze tra una applicazione Java a riga di comando ed una a finestre. Mostrare un esempio minimale di entrambe in codice Java. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 149/159
09. Descrivere cosa sono e a cosa servono le classi JButton, JLabel, JTextField e JTextArea. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 151/159
09. Descrivere a cosa serve e come si usa un BorderLayout.
10. Descrivere cosa i gestori di layout e quali sono e le principali differenze tra BorderLayout e GridLayout. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 153/159
01. Descrivere come si fa a scrivere del codice che venga eseguito alla pressione di un pulsante JButton. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 154/159
09. Descrivere cosa sono, come funzionano e a cosa servono le finestre di dialogo di Swing. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 156/159
09. Descrivere il funzionamento dell'interfaccia MouseListener per la cattura degli eventi del mouse.
10. Descrivere quali sono gli eventi del mouse che è possibile catturare tramite l'interfaccia MouseListener. INGEGNERIA INFORMATICA E DELL'AUTOMAZIONE (D.M. 270/04) © 2016 - 2022 Università Telematica eCampus - Data Stampa 17/06/2022 14:13:25 - 158/159